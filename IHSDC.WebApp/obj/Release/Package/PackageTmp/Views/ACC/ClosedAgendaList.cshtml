@model IHSDC.WebApp.Models.InboxCRUD
@using IHSDC.WebApp.Connection
@using IHSDC.WebApp.Helper

@{
    var message = TempData["Message"] ?? string.Empty;
    var messageStatus = TempData["messageStatus"] ?? string.Empty;
    var messagemidStatus = TempData["messagemidStatus"] ?? string.Empty;
    ViewBag.Title = "Closed Agenda Pgme";
    Layout = "~/Views/Shared/_NewAA7Layout.cshtml"; int sno = 0;
    //int sno1 = 0;
    //int rowCount = 0;

}
@{
    var watermarkText = ViewBag.ipadd;
}
<style>
    .ht {
        height: 7rem;
    }

    .card-body {
        flex: 1 1 auto;
        min-height: 1px;
        padding: 0.55rem !important;
    }

    .flip-card-link {
        height: 7rem;
        width: 9rem;
        border-radius: 19px;
        /*   box-shadow: 1px 1px 4px;*/
    }

    .flip-card-inner {
        border-radius: 19px;
        /*   box-shadow: 1px 1px 4px;*/
    }

    .dropdown-item:hover {
        background: #4CAF50 !important;
        /* font-size: 9px !important;*/
        border-radius: 13px;
    }


    .flip-card-inner:hover {
        /*   width: 100px;
        height: 100px;*/
        background: #4CAF50;
        font-size: 19px !important;
        /* transform: rotate(360deg);*/
    }

        .flip-card-inner:hover > .icon {
            color: white !important;
        }


    .icon:hover {
        color: white !important;
    }

    .flip-card-link {
        position: relative;
        width: 100%;
        height: 100%;
        text-align: center;
        transition: transform 0.6s;
        transform-style: preserve-3d;
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
    }

    .flip-card-inner {
        position: relative;
        width: 100%;
        height: 100%;
        text-align: center;
        transition: transform 0.6s;
        transform-style: preserve-3d;
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
    }


    .flip-card-front, .flip-card-back {
        position: absolute;
        width: 100%;
        height: 100%;
        -webkit-backface-visibility: hidden;
        backface-visibility: hidden;
    }





    #div1 {
        box-sizing: border-box;
        width: 150px;
        height: 100px;
        padding: 3px;
        border: 3px solid blue;
    }





    .border-left-primary {
        border-left: .25rem solid #4e73df !important;
    }

    a {
        text-decoration: none !important;
        color: inherit;
    }

    .pb-2, .py-2 {
        padding-bottom: .5rem !important;
    }

    .border-left-success {
        border-left: .25rem solid #1cc88a !important;
    }

    .border-left-info {
        border-left: .25rem solid #36b9cc !important;
    }

    .border-left-warning {
        border-left: .25rem solid #f6c23e !important;
    }

    .text-gray-300 {
        color: #dddfeb !important;
    }

    .card-body {
        flex: 1 1 auto;
        min-height: 1px;
        padding: 1.25rem;
    }

    .mb-3 {
        margin-bottom: 0.3rem !important;
    }

    .clickable-div {
        color: blue;
        cursor: pointer;
        text-decoration: underline;
    }

    .container {
        position: relative;
        width: 100%;
    }

    #word-container {
        min-height: 400px;
        max-height: 400px;
        overflow-y: scroll;
    }
    table {
        border-collapse: collapse;
        width: 100%;
    }

    th, td {
        text-align: left;
        padding: 8px;
    }
</style>
<head>
    <link href="~/NewContent/css/sb-admin.css" rel="stylesheet">
</head>



<div class="container">

    <div class="card">
        <div class="col1">

            <div class="row">
                <div class="col-md-4"></div>
                <div class="col-md-4 headingtext">Closed Agenda Pt</div>
                <div class="col-md-4"></div>

            </div>
        </div>

        @using (Html.BeginForm("ClosedAgendaList", "ACC", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.HiddenFor(m => m.Inbox_ID)
            @Html.HiddenFor(m => m.FinalSubmitYN)
            @Html.HiddenFor(m => m.FromInbox)
            if (SessionManager.RoleId != enum1.GSO1)
            {
                @Html.HiddenFor(m => m.IsVisibleToAll)
                @Html.HiddenFor(m => m.AllowEdit)
            }

            if (SessionManager.RoleId == enum1.GSO1)
            {
                @Html.HiddenFor(m => m.NodalCategoryId)
            }
            else if (SessionManager.RoleId == enum1.Sponsor)
            {
                @Html.HiddenFor(m => m.CategoryId)
                @Html.HiddenFor(m => m.NodalCategoryId)
            }
            else if (SessionManager.RoleId == enum1.Nodal)
            {
                @Html.HiddenFor(m => m.CategoryId)
                @Html.HiddenFor(m => m.SponsorCategoryId)
            }


            <div class="card-body" style="min-height:150px;">
                <div class="row">
                    <div class="col-sm-12">
                        <div class="table-responsive">
                            <table class="table table-striped" id="Agenda" width="100%" cellspacing="0">
                                <thead class="bg-info text-white">
                                    <tr>
                                        <th class="center">S/No</th>
                                        <th class="center">AP Id</th>
                                        <th class="center">Conf Title</th>
                                        <th class="center">Sponsor</th>
                                        <th class="center">Agenda Pt Title</th>
                                        <th class="center">Nodal Branch</th>
                                        <th class="center">Category</th>
                                        <th class="center">Sent On</th>
                                        <th class="center">Closed by</th>
                                        <th class="center">Closed On</th>
                                        <th class="center">Reason for Close</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody id="tbody">
                                    @if (ViewBag.count > 0)
                                    {
                                        foreach (var item in Model.ILInboxCRUD)
                                        {
                                            <tr class="row-light">
                                                <td>
                                                    @{ sno++; }
                                                    @sno
                                                </td>
                                                <td>@Html.DisplayFor(modelItem => item.Inbox_ID)</td>

                                                <td class="RefLetter-container">
                                                    @Html.DisplayFor(modelItem => item.Conf)
                                                    <div class="RefLetter">
                                                        @Html.DisplayFor(modelItem => item.RefLetter)
                                                    </div>
                                                </td>



                                                <td>@Html.DisplayFor(modelItem => item.UnitName)</td>
                                                <td>
                                                    @Html.DisplayFor(modelItem => item.Title)
                                                </td>
                                                <td>@Html.DisplayFor(modelItem => item.BranchName)</td>
                                                <td>@Html.DisplayFor(modelItem => item.CategoryName)</td>
                                                <td>@Html.DisplayFor(modelItem => item.DateTimeOfUpdate)</td>
                                                <td>@Html.DisplayFor(modelItem => item.CloseByName)</td>
                                                <td>@Html.DisplayFor(modelItem => item.CloseDate)</td>
                                                <td>@Html.DisplayFor(modelItem => item.CloseReason)</td>
                                                <td>
                                                    <a onclick="location.href='@Url.Action("OpenAgendaPtNoting", "Noting", new {   id = IHSDC.WebApp.RepositryManager.EncryptionManager.Encryption(item.Inbox_ID.ToString())})'">

                                                        <div class="openbut"></div>
                                                    </a>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {

                                    }
                                </tbody>
                            </table>




                        </div>
                    </div>
                </div>

            </div>

        }
    </div>
</div>
<script src="~/Scripts/jquery-3.3.1.js"></script>
<script src="~/Content/CustomJS/GEBSubmit.js"></script>
<script src="~/Content/CustomJS/AviatorJS.js"></script>
<script src="~/Content/CustomJS/DeleteConfirmation.js"></script>
<script src="~/Content/css/sweetalert.min.js"></script>
<link href="~/Content/css/sweetalert.css" rel="stylesheet" />
<script src="~/NewContent/vendor/jquery/jquery.min.js"></script>
<script src="~/NewContent/mammoth.browser.min.js"></script>
<script>
    const tooltipContainers = document.querySelectorAll('.tooltip-container');

    tooltipContainers.forEach(container => {
        container.addEventListener('mouseenter', () => {
            const tooltip = container.querySelector('.tooltip');
            tooltip.style.visibility = 'visible';
            tooltip.style.opacity = '1';
        });

        container.addEventListener('mouseleave', () => {
            const tooltip = container.querySelector('.tooltip');
            tooltip.style.visibility = 'hidden';
            tooltip.style.opacity = '0';
        });
    });
</script>
<script>
        var watermarkText = @Html.Raw(Json.Encode(watermarkText));
</script>
<script>

   
    $(document).ready(function () {
        var table = $('#Agenda').DataTable({
            lengthChange: true,
            pageLength: 50,
            aLengthMenu: [[25, 50, 100, 150, 200, 250, -1], [25, 50, 100, 150, 200, 250, "All"]],
            /* dom: 'Bfrtip',*/
            dom: 'lBfrtip',
            buttons: [
                'copy',
                'excel',
                'csv',
                /* 'print',*/
                {
                    text: 'PDF',
                    extend: 'pdfHtml5',
                    action: function (e, dt, node, config) {
                        PrintDiv();
                    }
                },
                'colvis',
            ],
            
        });

        
        var buttonContainer = table.buttons().container().appendTo('#Agenda_wrapper .col-md-6:eq(0)');
        var searchBuilderContainer = table.searchBuilder.container();
        buttonContainer.insertBefore(table.table().container());
        searchBuilderContainer.insertBefore(table.table().container());

    });


    function PrintDiv() {
        var popupWin = window.open('', '_blank', 'top=100,width=900,height=500,location=no');
        popupWin.document.open();

        var tableStyles = `
                        <style type="text/css">
                            table {
                                width: 100%;
                                border-collapse: collapse;
                                margin-bottom: 20px;
                            }

                            th, td {
                                padding: 8px;
                                border: 1px solid #ddd;
                                text-align: center;
                            }

                            th {
                                background-color: #f2f2f2;
                                color: black;
                            }
                            @@media print {

                                @@page {
                                    margin-top: 10px;
                                    margin-bottom: 10px;
                                }

                                body::after {
                                    content: none !important;
                                }

                                .card-page {
                                    break-after: page;
                                }

                                    .card-page:last-of-type {
                                        break-after: auto;
                                    }

                                footer {
                                    position: fixed;
                                    bottom: 0;
                                    left: 0;
                                    right: 0;
                                    height: 10px;
                                    background-color: gray;
                                    color: white;
                                    text-align: center;
                                    padding: 10px;
                                }

                                header {
                                    position: fixed;
                                    top: 0;
                                    left: 0;
                                    right: 0;
                                    height: 10px;
                                    background-color: gray;
                                    color: white;
                                    text-align: center;
                                    padding: 10px;
                                }
                            }
                        </style>
                    `;

        var table = $('#Agenda').DataTable();
        var visibleColumns = table.columns(':visible').header().toArray();
        var filteredData = table.rows({ search: 'applied' }).data().toArray();

        var tableHTML = '<table>';

        tableHTML += '<thead>';
        tableHTML += '<tr>';
        visibleColumns.forEach(function (header) {
            tableHTML += '<th>' + header.innerHTML + '</th>';
        });
        tableHTML += '</tr>';
        tableHTML += '</thead>';

        tableHTML += '<tbody>';
        for (var i = 0; i < filteredData.length; i++) {
            tableHTML += '<tr>';
            for (var j = 0; j < filteredData[i].length; j++) {
                if (!table.column(j).visible()) {
                    continue;
                }
                tableHTML += '<td>' + filteredData[i][j] + '</td>';
            }
            tableHTML += '</tr>';
        }
        tableHTML += '</tbody>';

        tableHTML += '</table>';
        var pageHeading = '<h1 style="text-align: center; margin-top: 20px;">Closed Agenda Point List</h1>';
        popupWin.document.write('<html><head>' + pageHeading + tableStyles + '</head><body onload="window.print()">' + tableHTML + '<div style="transform: rotate(-45deg);z-index:10000;opacity: 0.3;color: BLACK; position:fixed;top: auto; left: 6%; top: 39%;color: #8e9191;font-size: 80px; font-weight: 500px;display: grid;justify-content: center;align-content: center;">' + watermarkText + '</div></body></html>');

        popupWin.document.close();
    }


</script>
<script>

      var message = '@message';
    var messageStatus = '@messageStatus';
    var messagemidStatus = '@messagemidStatus ';
    if (message)
			sweetAlert(message, messagemidStatus, messageStatus);







    $(document).ready(function () {

        var pdfUrl = $("#files").attr('value');


        if (pdfUrl) {
            fetch(pdfUrl)
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Failed to load PDF document");
                    }
                    return response.blob();
                })
                .then(blob => {
                    const pdfFile = new File([blob], "aa.pdf", { type: 'application/pdf' });

                    const pdfContainer = document.getElementById("pdf-container");

                    if (pdfFile) {
                        const selectedFile = pdfFile;

                        if (selectedFile.type === "application/pdf" || selectedFile.name.endsWith(".pdf")) {
                            const reader = new FileReader();

                            reader.onload = function (e) {
                                const embed = document.createElement("embed");
                                embed.src = e.target.result;
                                embed.type = "application/pdf";
                                embed.width = "100%";
                                embed.height = "370px";
                                pdfContainer.innerHTML = "";
                                pdfContainer.appendChild(embed);
                                pdfContainer.style.display = "block";
                            };

                            reader.readAsDataURL(selectedFile);
                        } else {
                            alert("Please select a valid PDF file.");
                            pdfContainer.innerHTML = "";
                        }
                    }

                    console.log("Converted File Object:", pdfFile);

                    const formData = new FormData();
                })
                .catch(error => {
                    console.error("Failed to fetch or convert the PDF:", error);
                    const pdfContainer = document.getElementById("pdf-container");
                    pdfContainer.innerHTML = "Failed to load PDF document.";
                });
        }
    });

</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const form = document.getElementById("myForm");
        const btnSave = document.getElementById("btnSave");
        const wordFileInput = document.getElementById("Wordfiles");
        const wordFileError = document.getElementById("wordFileError");
        const PdfFileInput = document.getElementById("files");
        const PdfFileError = document.getElementById("PdfFileError");

        function clearFileError(inputElement, errorElement) {
            inputElement.addEventListener("change", function () {
                if (inputElement.files.length) {
                    errorElement.style.display = "none";
                }
            });
        }

        
        clearFileError(wordFileInput, wordFileError);
        clearFileError(PdfFileInput, PdfFileError);

        btnSave.addEventListener("click", function (e) {
            let isValid = true;


            if (!wordFileInput.files.length) {
                wordFileError.style.display = "block";
                isValid = false;
            } else {
                wordFileError.style.display = "none";
            }


            if (!PdfFileInput.files.length) {
                PdfFileError.style.display = "block";
                isValid = false;
            } else {
                PdfFileError.style.display = "none";
            }

              const buttonName = "@ViewBag.ButtonName";
             const uploadPath = "@ViewBag.UploadPath";
            if (buttonName === "Update" && uploadPath !== "") {
                wordFileError.style.display = "none";
                PdfFileError.style.display = "none";
                return true;
            }

            if (!isValid) {
                e.preventDefault();
                return false;
            }
        });
    });
</script>
